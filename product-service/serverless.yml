service: product-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-west-1
  environment:
    PRODUCTS_TABLE: products
    STOCKS_TABLE: stocks
    SQS_QUEUE_URL: !Ref catalogItemsQueue
    SNS_ARN: !Ref createProductTopic

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:PutItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.STOCKS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.STOCKS_TABLE}/index/ProductIndex"

functions:
  createProduct:
    handler: dist/handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true

  getProductsList:
    handler: dist/handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
          documentation:
            summary: "Get list of products"
            description: "Returns a list of all products"
            tags:
              - "Products"
            responses:
              200:
                description: "List of products"
                responseSchema:
                  type: array
                  items:
                    ref: "Product"

  getProductsById:
    handler: dist/handler.getProductsById
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          documentation:
            summary: "Get product by ID"
            description: "Returns a specific product by ID"
            pathParams:
              - name: "id"
                description: "Product ID"
                paramType: "path"
                type: string
                required: true
            tags:
              - "Products"
            responses:
              200:
                description: "Product found"
                responseSchema:
                  ref: "Product"

  catalogBatchProcess:
    handler: dist/handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: !GetAtt catalogItemsQueue.Arn

plugins:
  - serverless-aws-documentation
  - serverless-offline

custom:
  documentation:
    api:
      info:
        version: "1.0.0"
        title: "Product Service API"
    models:
      - name: "Product"
        description: "Product Model"
        contentType: "application/json"
        schema:
          type: object
          required:
            - id
            - count
            - description
            - price
            - title
          properties:
            id:
              type: string
              description: "Product ID"
            count:
              type: integer
              description: "Product count"
            description:
              type: string
              description: "Product description"
            price:
              type: number
              description: "Product price"
            title:
              type: string
              description: "Product title"

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue

    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Create product topic"
        TopicName: createProductTopic

    topicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: kukhar.vitalii@gmail.com
        TopicArn: !Ref createProductTopic
